@model ProductViewModel

<h1>@(Model.Product.Id != 0 ? "Update " : "Create ")Product</h1>

<form method="post" enctype="multipart/form-data">
	<input asp-for="Product.Id" hidden />
	<input asp-for="Product.ImageUrl" hidden />
	<div>
		<div>
			@if (Model.Product.Id != 0)
			{
				<img src="@Model.Product.ImageUrl" alt="Alternate Text" style="width: 50px; height: 50px; object-fit: contain;" />
			}
		</div>

		<div>
			<label asp-for="Product.Title">Title</label>
			<input asp-for="Product.Title" type="text" />
		</div>
		<div>
			<label asp-for="Product.Description">Description</label>
			<input asp-for="Product.Description" type="text" />
		</div>
        <div>
			<label asp-for="Product.ISBN">ISBN</label>
			<input asp-for="Product.ISBN" type="text" />
		</div>
        <div>
			<label asp-for="Product.Author">Author</label>
			<input asp-for="Product.Author" type="text" />
		</div>
        <div>
			<label asp-for="Product.ListPrice">List Price</label>
			<input asp-for="Product.ListPrice" type="text" />
		</div>
		<div>
			<label asp-for="Product.Price">Price</label>
			<input asp-for="Product.Price" type="text" />
		</div>
        <div>
			<label asp-for="Product.Price50">Price50</label>
			<input asp-for="Product.Price50" type="text" />
		</div>
		<div>
			<label asp-for="Product.Price100">Price100</label>
			<input asp-for="Product.Price100" type="text" />
		</div>

		<div>			
			<select asp-for="@Model.Product.CategoryId" asp-items="@Model.Categories" class="form-select">
				<option disabled selected>Select category</option>
			</select>
			<label asp-for="@Model.Product.CategoryId" />
		</div>

		<div class="form-floating py-2 col-12">
			<input type="file" name="file" class="form-control border-0 shadow" />
			<label asp-for="Product.ImageUrl" class="ms-2"></label>
		</div>

		<button type="submit">@(Model.Product.Id != 0 ? "Update " : "Create ")</button>
		<a asp-controller="Product" asp-action="Index">Back to list</a>
	</div>
</form>

@section Scripts {
	<script>
		tinymce.init({
		  selector: 'textarea',
		  plugins: [
			// Core editing features
			'anchor', 'autolink', 'charmap', 'codesample', 'emoticons', 'image', 'link', 'lists', 'media', 'searchreplace', 'table', 'visualblocks', 'wordcount',
			// Your account includes a free trial of TinyMCE premium features
			// Try the most popular premium features until Dec 29, 2024:
			'checklist', 'mediaembed', 'casechange', 'export', 'formatpainter', 'pageembed', 'a11ychecker', 'tinymcespellchecker', 'permanentpen', 'powerpaste', 'advtable', 'advcode', 'editimage', 'advtemplate', 'ai', 'mentions', 'tinycomments', 'tableofcontents', 'footnotes', 'mergetags', 'autocorrect', 'typography', 'inlinecss', 'markdown','importword', 'exportword', 'exportpdf'
		  ],
		  toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent',
		  tinycomments_mode: 'embedded',
		  tinycomments_author: 'Author name',
		  mergetags_list: [
			{ value: 'First.Name', title: 'First Name' },
			{ value: 'Email', title: 'Email' },
		  ],
		  ai_request: (request, respondWith) => respondWith.string(() => Promise.reject('See docs to implement AI Assistant')),
		});
	</script>

	@{
		<partial name="_ValidationScriptsPartial" />
	}
}			